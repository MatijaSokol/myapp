# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 11

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2
        with:
          sdk-platform: ['android-30']
          ndk-version: ['21.4.7075529']

      - name: Accept Android licenses
        run: yes | sdkmanager --licenses

      - name: Create Android Emulator
        run: |
          sdkmanager --install "system-images;android-30;google_apis;x86_64"
          avdmanager create avd --name test-emulator --package "system-images;android-30;google_apis;x86_64" --device "pixel" --sdcard 100M --force
          emulator -avd test-emulator -no-window -no-audio -no-boot-anim -gpu swiftshader_indirect -dns-server 8.8.8.8 &

          # Wait for the emulator to start
          echo "Waiting for emulator to start..."
          BOOT_TIMEOUT=180
          while [[ $BOOT_TIMEOUT -gt 0 ]] && ! adb shell 'getprop init.svc.bootanim' | grep -q stopped; do
            sleep 1
            BOOT_TIMEOUT=$((BOOT_TIMEOUT-1))
          done
          if [[ $BOOT_TIMEOUT -eq 0 ]]; then
            echo "Emulator failed to start within the timeout period."
            exit 1
          fi

      - name: Build and run instrumented tests
        run: |
          ./gradlew connectedCheck